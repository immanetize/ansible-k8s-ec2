#- name: copy cert for this host, before we start
#  become: true
#  copy:
#    src: /etc/kubernetes/pki
#    dest: "/etc/kubernetes/pki-{{ inventory_hostname }}"
#    remote_src: yes
#    mode: 0700
- name: make some new certs
  block:
    - name: make the stage dir for this host
      become: true
      file:
        path: "/etc/kubernetes/pki-{{ target_host }}/pki/etcd"
        state: directory
        recurse: yes
    - name: populate CA data into stage dir
      become: true
      copy:
        remote_src: true
        src: "/etc/kubernetes//pki/etcd/{{ item }}"
        dest: "/etc/kubernetes/pki-{{ target_host }}/pki/etcd/{{ item }}"
      with_items:
        - ca.crt
        - ca.key
    - name: change the symlink
      become: true
      file:
        path: /etc/kubernetes/pki
        src: "/etc/kubernetes/pki-{{ target_host }}/pki"
        state: link
        force: yes
    - name: issue cerver certs
      become: true
      shell: "kubeadm init phase certs etcd-server --config /tmp/{{ target_host }}.etcd.yaml creates=/etc/kubernetes/pki-{{target_host}}/pki/etcd/server.key"
      register: etcd_server
    - name: issue peer certs
      become: true
      shell: "kubeadm init phase certs etcd-peer --config /tmp/{{ target_host }}.etcd.yaml creates=/etc/kubernetes/pki-{{target_host}}/pki/etcd/peer.key"
      register: etcd_peer_certs
    - name: issue healthcheck certs
      become: true
      shell: "kubeadm init phase certs etcd-healthcheck-client --config /tmp/{{ target_host }}.etcd.yaml creates=/etc/kubernetes/pki-{{target_host}}/pki/etcd/healthcheck-client.key"
      register: healthcheck_certs
    - name: issue apisever certs
      become: true
      shell: "kubeadm init phase certs apiserver-etcd-client --config /tmp/{{ target_host }}.etcd.yaml creates=/etc/kubernetes/pki-{{ target_host }}/pki/apiserver-etcd-client.key"
    - stat: 
        path: "{{ item }}"
      register: cert_files_stat
      with_items: "{{ cert_files }}"
      become: true
    - name: change the symlink back
      become: true
      file:
        path: /etc/kubernetes/pki
        src: "/etc/kubernetes/pki-{{ inventory_hostname }}/pki"
        state: link
        force: yes
    - debug: var=cert_files_stat
- name: get file contents
  become: true
  slurp: 
    src: "{{ item | replace('pki', 'pki-%s/pki' % target_host) }}"
  with_items: "{{ cert_files + ['/etc/kubernetes/pki/etcd/ca.crt'] }}"
  register: cert_data
- debug: var=cert_data
- set_fact:
    role_certs: "{{ role_certs | default({}) | combine( { item.item: item.content | b64decode } ) }}"
  with_items: "{{ cert_data.results }}"
  delegate_to: "{{ target_host }}"
  delegate_facts: true

