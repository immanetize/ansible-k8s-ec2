---
- name: create dropin service dir for kubelet
  become: true
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory
- name: configure kubelet service manager for etcd
  become: true
  template:
    src: kube_etc_service_manager.service.j2
    dest: /etc/systemd/system/kubelet.service.d/20-etc-service-manager.conf
  register: kube_svc_init
- name: reload systemd
  become: true
  systemd:
    name: kubelet
    state: "{{ 're' if kube_svc_init.changed else '' }}started"
    daemon-reload: "{{ 'yes' if kube_svc_init.changed else omit }}"
- name: set initial cluster string
  set_fact:
    initial_cluster: "{{ initial_cluster | default('') + '%s=https://%s:2380' % ( item, item ) }},"
  with_items: "{{ ansible_play_batch }}"
- name: ship etcd cluster config
  template:
    src: kubeadm_etcd_cluster_resource.yaml.j2
    dest: "kubeadmcfg.yaml"
  vars: 
    target_host: "{{ inventory_hostname }}"
- name: set up CA
  run_once: true
  become: true
  block:
    - name: ship etcd cluster config
      template:
        src: kubeadm_etcd_cluster_resource.yaml.j2
        dest: "/tmp/{{ target_host }}.etcd.yaml"
      loop: "{{ ansible_play_batch }}"
      loop_control:
        loop_var: target_host
    - name: prep the dir
      become: true
      file:
        path: "/etc/kubernetes/pki-{{ inventory_hostname }}/pki/etcd"
        state: directory
    - name: symlink pki directory to host dir
      become: true
      file:
        src: "/etc/kubernetes/pki-{{ inventory_hostname }}/pki"
        path: /etc/kubernetes/pki
        force: yes
        state: link
    - name: create etcd cacerts
      become: true
      shell: kubeadm init phase certs etcd-ca creates=/etc/kubernetes/pki/etcd/ca.crt
- name: purge certs
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ cert_files }}"
  when: ( inventory_hostname in purge_certs | default([]) )
- name: prep cert dir
  become: true
  file:
    name: /etc/kubernetes/pki/etcd
    state: directory
    recurse: yes
- name: check for cert files
  stat:
    path: "{{ item }}"
    get_checksum: no
    get_mime: no
  register: cert_check
  with_items: "{{ cert_files  }}"
- set_fact:
    files_needed: "{{ files_needed | default([]) + [ item.item ] }}"
  with_items: "{{ cert_check.results }}"
  when: ( not item['stat']['exists'] )
- debug: var=files_needed
- name: issue certs
  run_once: true
  include_tasks: etcd_cert_issue.yml
  loop: "{{ ansible_play_batch }}"
  loop_control:
    loop_var: target_host
  when: ( hostvars.get(target_host).get('files_needed') is defined )
- name: init pod manifests
  become: true
  shell: "kubeadm init phase etcd local --config=/home/{{ ansible_user }}/kubeadmcfg.yaml"
  register: etcd_init
- include_tasks: check_cluster_health.yml
- name: retrieve etcd client cert
  become: true
  slurp:
    src: "{{ item }}"
  with_items: 
    - /etc/kubernetes/pki/etcd/ca.crt
    - /etc/kubernetes/pki/apiserver-etcd-client.crt
    - /etc/kubernetes/pki/apiserver-etcd-client.key
  run_once: true
  register: etcd_client_certpack
- name: write out the certs for later use
  run_once: true
  delegate_to: localhost
  copy:
    content: "{{ item.content | b64decode }}"
    dest: "{{ playbook_dir }}/local_cache{{ item.item.split('/')[-1] }}"
  with_items: "{{ etcd_client_certpack.results }}"
