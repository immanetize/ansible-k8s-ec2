---
    - name: create etcd cacerts
      become: true
      shell: kubeadm init phase certs etcd-ca creates=/etc/kubernetes/pki/etcd/ca.crt
- name: purge certs
  become: true
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ cert_files }}"
  when: ( inventory_hostname in purge_certs | default([]) )
- name: prep cert dir
  become: true
  file:
    name: /etc/kubernetes/pki/etcd
    state: directory
    recurse: yes
- name: check for cert files
  stat:
    path: "{{ item }}"
    get_checksum: no
    get_mime: no
  register: cert_check
  with_items: "{{ cert_files  }}"
- set_fact:
    files_needed: "{{ files_needed | default([]) + [ item.item ] }}"
  with_items: "{{ cert_check.results }}"
  when: ( not item['stat']['exists'] )
- debug: var=files_needed
- name: issue certs
  run_once: true
  include_tasks: etcd_cert_issue.yml
  loop: "{{ ansible_play_batch }}"
  loop_control:
    loop_var: target_host
  when: ( hostvars.get(target_host).get('files_needed') is defined )
- name: init pod manifests
  become: true
  shell: "kubeadm init phase etcd local --config=/home/{{ ansible_user }}/kubeadmcfg.yaml"
  register: etcd_init
- include_tasks: check_cluster_health.yml
- name: retrieve etcd cacert
  become: true
  slurp:
    src: "/etc/kubernetes/pki/etcd/ca.crt"
  register: etcd_cacert
- name: retrieve etcd client cert
  become: true
  slurp:
    src: /etc/kubernetes/pki/apiserver-etcd-client.crt
  register: etcd_clientcert
- name: retrieve etcd client key
  become: true
  slurp:
    src: /etc/kubernetes/pki/apiserver-etcd-client.key
  run_once: true
  register: etcd_clientkey
- name: upload certs to acm
  aws_acm:
    region: "{{ region }}"
    certificate: "{{ etcd_clientcert.content |b64decode }}"
    name_tag: "etcd_{{ cluster_name }}"
    private_key: "{{ etcd_clientkey.content |b64decode }}"
- name: write out the certs for later use
  run_once: true
  delegate_to: localhost
  copy:
    content: "{{ item.content | b64decode }}"
    dest: "{{ playbook_dir }}/local_cache/{{ item.item.split('/')[-1] }}"
  with_items: "{{ etcd_client_certpack.results }}"



















