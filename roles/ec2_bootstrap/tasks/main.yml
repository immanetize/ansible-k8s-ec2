- name: create ec2 instances
  delegate_to: localhost
  ec2_instance: 
    instance_role: kube_master
    state: "{{ state | default('present') }}"
    profile: "{{ aws_profile }}"
    image_id: "{{ image_id }}"
    instance_type: "{{ instance_type |default('t3.small') }}"
    key_name: "{{ ssh_key.aws_label }}"
    name: "{{ instance_name | default(inventory_hostname) }}"
    region: "{{ region }}"
    tags: "{{ { 'kubernetes.io/cluster/%s' % cluster_name: 'fancy', 'KubernetesCluster': cluster_name, 'randomuser.org/usage': 'provisioning'} }}"
    user_data: "{{ user_data | default(omit) }}"
    vpc_subnet_id: "{{ subnet_id }}"
  register: instances
- debug: var=instances
  when: ( instance_debug is defined )
- debug: 
    msg: "{{ inventory_hostname }} mapped to instance {{ item.instance_id }}"
  with_items: "{{ instances.instances }}"
- block:
    - debug: var=instances
    - name: purge run, nothing else to do
      fail:
      when: ( state == "absent" )
  when: ( state is defined )
- set_fact:
    ansible_host: "{{ item.private_ip_address }}"
    private_ip: "{{ item.private_ip_address }}"
    node_name: "{{ item.private_dns_name }}"
    instance_id: "{{ item.instance_id }}"
    provider_id: "aws://{{av_zone}}/{{ item.instance_id }}"
    ansible_user: "fedora"
    ansible_ssh_private_key_file:  "{{ ssh_key.local_path }}"
    ansible_ssh_common_args: "{{ ansible_ssh_common_args + ' -o StrictHostKeyChecking=No ' }}"
    ansible_python_interpreter: "{{ interpreter }}"
  with_items: "{{ instances.instances }}"
  when: ( item.tags.Name == instance_name |default(inventory_hostname) ) 
